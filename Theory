Lesson02 мемоизация
Меоизация - сохранение результатов выполнения функций для предотвращения повторных вычислений

Lesson03 Оценка эффективности алгоритмов
n - размер аргумента. 
Константы - мощность компьютера, архитектура ОС и тд. Их в оценке алгоритма мы не рассматриваем.
Big O - асимптотическая оценка алгоритма.
Асимптотика - поведение функции при стремлении аргумента к бесконечности.
Например, поиск элемента в несортированном списке имеет значение O(n) (при увеличении количества даных время выполнения растет линейно). O(1) - идеальный алгоритм (время выполнения не зависит от объема данных). O(n^2) - не очень (массив из 4 элементов требует 16 шагов). O(2^n) и O(n!) - худшие алгоритмы.
Нотация Big O - порядок роста или асимптотическая оценка роста. Big-O = O(n): O - объем данных, n - нотация
Сложность алгоритма надо описывать через количество операций выполняемых для достижения результата, в зависимости от ввода (операций на ввод), проще говоря - насколько возрастет кол-во операций при увеличении кол-ва входных параметров.

Основные классы сложности применяемые при анализе
O(1) константа - применяется когда результат можно узнать за одно действие
O(log(n)) логарифмический рост
O(n) - размер аргумента и время выполнения алгоритма растут одинаково 
O(n log n) - n = 10 -> t = 10 * log(10). При увеличении аргумента n время алгоритма растет как n * log(n). Эта оценка присуща всем эффективным алгоритмам сортировки 
O(n^2) - n = 10 -> t = 10 * 10^2. 
O(2^n) - самый плохой алгоритм

Самое важное во времени работы программы это то как эта программа изменяет время своей работы при увеличении аргумента

Правила использования большого О
1. Константы игнорируются. 
2. В выражении учитывается только самая быстрорастущая функция, потому что при очень большом n только она и будет играть существенную роль.
3. Основание логарифма не пишем, так как они отличаются друг от друга на константу.  